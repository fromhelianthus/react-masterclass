{"version":3,"sources":["Components/Header.tsx","api.ts","utils.ts","Routes/Home.tsx","Routes/Search.tsx","Routes/Tv.tsx","App.tsx","index.tsx","theme.ts"],"names":["Nav","styled","motion","nav","_templateObject","_taggedTemplateLiteral","NavText","_templateObject2","Col","div","_templateObject3","Logo","svg","_templateObject4","props","theme","red","Items","ul","_templateObject5","Item","li","_templateObject6","white","darker","lighter","Search","form","_templateObject7","Circle","span","_templateObject8","Input","input","_templateObject9","logoVariants","normal","fillOpacity","active","transition","repeat","Infinity","navVariants","top","backgroundColor","scroll","Header","searchOpen","setSearchOpen","useState","homeMatch","useRouteMatch","tvMatch","inputAnimation","useAnimation","navAnimation","scrollY","useViewportScroll","useEffect","onChange","get","start","history","useHistory","register","handleSubmit","useForm","_jsxs","variants","animate","initial","children","_jsx","whileHover","xmlns","width","height","viewBox","path","d","Link","to","isExact","layoutId","onSubmit","data","push","concat","keyword","onClick","toggleSearch","scaleX","prev","x","type","fill","fillRule","clipRule","required","minLength","placeholder","API_KEY","BASE_PATH","getMovies","fetch","then","response","console","log","json","getLatestMovies","async","ok","Error","getTopRatedMovies","getUpcomingMovies","getMoviesByKeyword","encodeURIComponent","getTvByKeyword","makeImagePath","id","format","Wrapper","Loader","Banner","bgPhoto","Title","h2","Subtitle","h3","Overview","p","Row","Box","Info","_templateObject10","black","Overlay","_templateObject11","BigMovie","_templateObject12","BigCover","_templateObject13","BigTitle","_templateObject14","BigOverview","_templateObject15","rowVariants","hidden","window","outerWidth","visible","exit","boxVariants","scale","hover","y","delay","duaration","infoVariants","opacity","Home","_latestMoviesData$res","_topRatedMoviesData$r","_upcomingMoviesData$r","bigMovieMatch","isLoading","useQuery","latestMoviesData","topRatedMoviesData","upcomingMoviesData","index","setIndex","leaving","setLeaving","toggleLeaving","onBoxClicked","movieId","clickedMovie","params","results","find","movie","_Fragment","incraseIndex","totalMovies","length","maxIndex","Math","floor","backdrop_path","title","overview","duration","map","poster_path","AnimatePresence","onOverlayClick","style","backgroundImage","SearchResult","Slider","SliderItem","location","useLocation","URLSearchParams","search","movies","setMovies","tvShows","setTvShows","loading","setLoading","error","setError","Promise","all","_ref","moviesData","tvShowsData","catch","err","src","alt","show","name","Tv","latestShows","setLatestShows","airingToday","setAiringToday","popularShows","setPopularShows","topRatedShows","setTopRatedShows","selectedShow","setSelectedShow","latest","getLatestShows","airingTodayData","getAiringTodayShows","popular","getPopularShows","topRated","getTopRatedShows","fetchData","renderSlider","shows","marginBottom","display","flexWrap","gap","minWidth","closeModal","padding","position","left","justifyContent","alignItems","zIndex","borderRadius","maxWidth","cursor","e","stopPropagation","color","border","marginTop","App","Router","Switch","Route","GlobalStyle","createGlobalStyle","client","QueryClient","ReactDOM","render","React","StrictMode","RecoilRoot","QueryClientProvider","ThemeProvider","veryDark","document","getElementById"],"mappings":"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","file":"static/js/main.80fbd00c.chunk.js","sourcesContent":["// Header.tsx\r\n\r\nimport { Link, useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { motion, useAnimation, useViewportScroll } from \"framer-motion\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst Nav = styled(motion.nav)`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    position: fixed;\r\n    width: 100%;\r\n    top: 0;\r\n    font-size: 14px;\r\n    padding: 20px 60px;\r\n    color: white;\r\n`;\r\n\r\nconst NavText = styled(motion.nav)`\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n    color: white;\r\n    text-transform: uppercase;\r\n    letter-spacing: 2px;\r\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);\r\n`;\r\n\r\nconst Col = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst Logo = styled(motion.svg)`\r\n    margin-right: 50px;\r\n    width: 95px;\r\n    height: 25px;\r\n    fill: ${(props) => props.theme.red};\r\n    path {\r\n        stroke-width: 3px;\r\n        stroke: white;\r\n    }\r\n`;\r\n\r\nconst Items = styled.ul`\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst Item = styled.li`\r\n    margin-right: 20px;\r\n    color: ${(props) => props.theme.white.darker};\r\n    transition: color 0.3s ease-in-out;\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    &:hover {\r\n        color: ${(props) => props.theme.white.lighter};\r\n    }\r\n`;\r\n\r\nconst Search = styled.form`\r\n    color: white;\r\n    display: flex;\r\n    align-items: center;\r\n    position: relative;\r\n    svg {\r\n        height: 25px;\r\n    }\r\n`;\r\n\r\nconst Circle = styled(motion.span)`\r\n    position: absolute;\r\n    width: 5px;\r\n    height: 5px;\r\n    border-radius: 2.5px;\r\n    bottom: -5px;\r\n    left: 0;\r\n    right: 0;\r\n    margin: 0 auto;\r\n    background-color: ${(props) => props.theme.red};\r\n`;\r\n\r\nconst Input = styled(motion.input)`\r\n    transform-origin: right center;\r\n    position: absolute;\r\n    right: 0px;\r\n    padding: 5px 10px;\r\n    padding-left: 40px;\r\n    z-index: -1;\r\n    color: white;\r\n    font-size: 16px;\r\n    background-color: transparent;\r\n    border: 1px solid ${(props) => props.theme.white.lighter};\r\n`;\r\n\r\nconst logoVariants = {\r\n    normal: {\r\n        fillOpacity: 1,\r\n    },\r\n    active: {\r\n        fillOpacity: [0, 1, 0],\r\n        transition: {\r\n            repeat: Infinity,\r\n        },\r\n    },\r\n};\r\n\r\nconst navVariants = {\r\n    top: {\r\n        backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n    },\r\n    scroll: {\r\n        backgroundColor: \"rgba(0, 0, 0, 1)\",\r\n    },\r\n};\r\n\r\ninterface IForm {\r\n    keyword: string;\r\n}\r\n\r\nfunction Header() {\r\n    const [searchOpen, setSearchOpen] = useState(false);\r\n    const homeMatch = useRouteMatch(\"/\");\r\n    const tvMatch = useRouteMatch(\"/tv\");\r\n    const inputAnimation = useAnimation();\r\n    const navAnimation = useAnimation();\r\n    const { scrollY } = useViewportScroll();\r\n    const toggleSearch = () => {\r\n        if (searchOpen) {\r\n            inputAnimation.start({\r\n                scaleX: 0,\r\n            });\r\n        } else {\r\n            inputAnimation.start({ scaleX: 1 });\r\n        }\r\n        setSearchOpen((prev) => !prev);\r\n    };\r\n    useEffect(() => {\r\n        scrollY.onChange(() => {\r\n            if (scrollY.get() > 80) {\r\n                navAnimation.start(\"scroll\");\r\n            } else {\r\n                navAnimation.start(\"top\");\r\n            }\r\n        });\r\n    }, [scrollY, navAnimation]);\r\n    const history = useHistory();\r\n    const { register, handleSubmit } = useForm<IForm>();\r\n    const onValid = (data: IForm) => {\r\n        history.push(`/search?keyword=${data.keyword}`);\r\n    };\r\n    return (\r\n        <Nav variants={navVariants} animate={navAnimation} initial={\"top\"}>\r\n            <Col>\r\n                <Logo\r\n                    variants={logoVariants}\r\n                    whileHover=\"active\"\r\n                    animate=\"normal\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"1024\"\r\n                    height=\"276.742\"\r\n                    viewBox=\"0 0 1024 276.742\"\r\n                >\r\n                    <motion.path d=\"M140.803 258.904c-15.404 2.705-31.079 3.516-47.294 5.676l-49.458-144.856v151.073c-15.404 1.621-29.457 3.783-44.051 5.945v-276.742h41.08l56.212 157.021v-157.021h43.511v258.904zm85.131-157.558c16.757 0 42.431-.811 57.835-.811v43.24c-19.189 0-41.619 0-57.835.811v64.322c25.405-1.621 50.809-3.785 76.482-4.596v41.617l-119.724 9.461v-255.39h119.724v43.241h-76.482v58.105zm237.284-58.104h-44.862v198.908c-14.594 0-29.188 0-43.239.539v-199.447h-44.862v-43.242h132.965l-.002 43.242zm70.266 55.132h59.187v43.24h-59.187v98.104h-42.433v-239.718h120.808v43.241h-78.375v55.133zm148.641 103.507c24.594.539 49.456 2.434 73.51 3.783v42.701c-38.646-2.434-77.293-4.863-116.75-5.676v-242.689h43.24v201.881zm109.994 49.457c13.783.812 28.377 1.623 42.43 3.242v-254.58h-42.43v251.338zm231.881-251.338l-54.863 131.615 54.863 145.127c-16.217-2.162-32.432-5.135-48.648-7.838l-31.078-79.994-31.617 73.51c-15.678-2.705-30.812-3.516-46.484-5.678l55.672-126.75-50.269-129.992h46.482l28.377 72.699 30.27-72.699h47.295z\" />\r\n                </Logo>\r\n                <Items>\r\n                    <Item>\r\n                        <Link to=\"/\">\r\n                            <NavText>Home </NavText>\r\n                            {homeMatch?.isExact && <Circle layoutId=\"circle\" />}\r\n                        </Link>\r\n                    </Item>\r\n                    <Item>\r\n                        <Link to=\"/tv\">\r\n                            <NavText>\r\n                                Tv Shows{\" \"}\r\n                                {tvMatch && <Circle layoutId=\"circle\" />}\r\n                            </NavText>\r\n                        </Link>\r\n                    </Item>\r\n                </Items>\r\n            </Col>\r\n            <Col>\r\n                <Search onSubmit={handleSubmit(onValid)}>\r\n                    <motion.svg\r\n                        onClick={toggleSearch}\r\n                        animate={{ x: searchOpen ? -185 : 0 }}\r\n                        transition={{ type: \"linear\" }}\r\n                        fill=\"currentColor\"\r\n                        viewBox=\"0 0 20 20\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            fillRule=\"evenodd\"\r\n                            d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\r\n                            clipRule=\"evenodd\"\r\n                        ></path>\r\n                    </motion.svg>\r\n                    <Input\r\n                        {...register(\"keyword\", {\r\n                            required: true,\r\n                            minLength: 2,\r\n                        })}\r\n                        animate={inputAnimation}\r\n                        initial={{ scaleX: 0 }}\r\n                        transition={{ type: \"linear\" }}\r\n                        placeholder=\"Search for movie or tv show...\"\r\n                    />\r\n                </Search>\r\n            </Col>\r\n        </Nav>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","// api.ts\r\n\r\nconst API_KEY = \"10923b261ba94d897ac6b81148314a3f\";\r\nconst BASE_PATH = \"https://api.themoviedb.org/3\";\r\n\r\nexport interface IMovie {\r\n    id: number;\r\n    backdrop_path: string;\r\n    poster_path: string;\r\n    title: string;\r\n    overview: string;\r\n}\r\n\r\nexport interface IGetMoviesResult {\r\n    dates: {\r\n        maximum: string;\r\n        minimum: string;\r\n    };\r\n    page: number;\r\n    results: IMovie[];\r\n    total_pages: number;\r\n    total_results: number;\r\n}\r\n\r\nexport function getMovies() {\r\n    return fetch(`${BASE_PATH}/movie/now_playing?api_key=${API_KEY}`).then(\r\n        (response) => {\r\n            console.log(\"Now Playing Movies Response:\", response);\r\n            return response.json();\r\n        }\r\n    );\r\n}\r\n\r\nexport const getLatestMovies = async () => {\r\n    const response = await fetch(\r\n        `${BASE_PATH}/movie/latest?api_key=${API_KEY}`\r\n    );\r\n    console.log(\"Latest Movies Response:\", response);\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch latest movies\");\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const getTopRatedMovies = async () => {\r\n    const response = await fetch(\r\n        `${BASE_PATH}/movie/top_rated?api_key=${API_KEY}`\r\n    );\r\n    console.log(\"Top Rated Movies Response:\", response);\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch top rated movies\");\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const getUpcomingMovies = async () => {\r\n    const response = await fetch(\r\n        `${BASE_PATH}/movie/upcoming?api_key=${API_KEY}`\r\n    );\r\n    console.log(\"Upcoming Movies Response:\", response);\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch upcoming movies\");\r\n    }\r\n    return response.json();\r\n};\r\n\r\n// TV Show\r\nexport const getLatestShows = async () => {\r\n    const response = await fetch(`${BASE_PATH}/tv/latest?api_key=${API_KEY}`);\r\n    console.log(\"Latest Shows Response:\", response);\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch latest shows\");\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const getAiringTodayShows = async () => {\r\n    const response = await fetch(\r\n        `${BASE_PATH}/tv/airing_today?api_key=${API_KEY}`\r\n    );\r\n    console.log(\"Airing Today Shows Response:\", response);\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch airing today shows\");\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const getPopularShows = async () => {\r\n    const response = await fetch(`${BASE_PATH}/tv/popular?api_key=${API_KEY}`);\r\n    console.log(\"Popular Shows Response:\", response);\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch popular shows\");\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const getTopRatedShows = async () => {\r\n    const response = await fetch(\r\n        `${BASE_PATH}/tv/top_rated?api_key=${API_KEY}`\r\n    );\r\n    console.log(\"Top Rated Shows Response:\", response);\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch top-rated shows\");\r\n    }\r\n    return response.json();\r\n};\r\n\r\n// 특정 TV 쇼 정보 가져오기\r\nexport const getTvDetails = async (tvId: number) => {\r\n    const response = await fetch(`${BASE_PATH}/tv/${tvId}?api_key=${API_KEY}`);\r\n    console.log(\"TV Details Response:\", response);\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch TV details\");\r\n    }\r\n    return response.json();\r\n};\r\n\r\n// Search\r\nexport const getMoviesByKeyword = async (keyword: string) => {\r\n    const response = await fetch(\r\n        `${BASE_PATH}/search/movie?api_key=${API_KEY}&query=${encodeURIComponent(\r\n            keyword\r\n        )}`\r\n    );\r\n    console.log(\"Movies by Keyword Response:\", response);\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch movies\");\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const getTvByKeyword = async (keyword: string) => {\r\n    const response = await fetch(\r\n        `${BASE_PATH}/search/tv?api_key=${API_KEY}&query=${encodeURIComponent(\r\n            keyword\r\n        )}`\r\n    );\r\n    console.log(\"TV by Keyword Response:\", response);\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch TV shows\");\r\n    }\r\n    return response.json();\r\n};\r\n","export function makeImagePath(id: string, format?: string) {\r\n  return `https://image.tmdb.org/t/p/${format ? format : \"original\"}/${id}`;\r\n}\r\n","import { useQuery } from \"react-query\";\r\nimport styled from \"styled-components\";\r\nimport { motion, AnimatePresence, useViewportScroll } from \"framer-motion\";\r\nimport {\r\n    getMovies,\r\n    getLatestMovies,\r\n    getTopRatedMovies,\r\n    getUpcomingMovies,\r\n    IGetMoviesResult,\r\n    IMovie,\r\n} from \"../api\";\r\nimport { makeImagePath } from \"../utils\";\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\n\r\nconst Wrapper = styled.div`\r\n    background: black;\r\n    padding-bottom: 200px;\r\n`;\r\n\r\nconst Loader = styled.div`\r\n    height: 20vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst Banner = styled.div<{ bgPhoto: string }>`\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    padding: 60px;\r\n    background-image: linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 1)),\r\n        url(${(props) => props.bgPhoto});\r\n    background-size: cover;\r\n`;\r\n\r\nconst Title = styled.h2`\r\n    font-size: 68px;\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nconst Subtitle = styled.h3`\r\n    font-size: 26px;\r\n    font-weight: 600;\r\n    color: white;\r\n    margin-top: 30px;\r\n    margin-bottom: 10px;\r\n    text-transform: uppercase;\r\n    letter-spacing: 2px;\r\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);\r\n`;\r\n\r\nconst Overview = styled.p`\r\n    font-size: 30px;\r\n    width: 50%;\r\n`;\r\n\r\nconst Slider = styled.div`\r\n    position: relative;\r\n    top: -100px;\r\n`;\r\n\r\nconst Row = styled(motion.div)`\r\n    display: grid;\r\n    gap: 5px;\r\n    grid-template-columns: repeat(6, 1fr);\r\n    position: relative;\r\n    width: 100%;\r\n`;\r\n\r\nconst Box = styled(motion.div)<{ bgPhoto: string }>`\r\n    background-color: white;\r\n    background-image: url(${(props) => props.bgPhoto});\r\n    background-size: cover;\r\n    background-position: center center;\r\n    height: 200px;\r\n    font-size: 66px;\r\n    cursor: pointer;\r\n    &:first-child {\r\n        transform-origin: center left;\r\n    }\r\n    &:last-child {\r\n        transform-origin: center right;\r\n    }\r\n`;\r\n\r\nconst Info = styled(motion.div)`\r\n    padding: 10px;\r\n    background-color: ${(props) => props.theme.black.lighter};\r\n    opacity: 0;\r\n    position: absolute;\r\n    width: 100%;\r\n    bottom: 0;\r\n    h4 {\r\n        text-align: center;\r\n        font-size: 18px;\r\n    }\r\n`;\r\n\r\nconst Overlay = styled(motion.div)`\r\n    position: fixed;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    opacity: 0;\r\n`;\r\n\r\nconst BigMovie = styled(motion.div)`\r\n    position: absolute;\r\n    width: 40vw;\r\n    height: 80vh;\r\n    left: 0;\r\n    right: 0;\r\n    margin: 0 auto;\r\n    border-radius: 15px;\r\n    overflow: hidden;\r\n    background-color: ${(props) => props.theme.black.lighter};\r\n`;\r\n\r\nconst BigCover = styled.div`\r\n    width: 100%;\r\n    background-size: cover;\r\n    background-position: center center;\r\n    height: 400px;\r\n`;\r\n\r\nconst BigTitle = styled.h3`\r\n    color: ${(props) => props.theme.white.lighter};\r\n    padding: 20px;\r\n    font-size: 46px;\r\n    position: relative;\r\n    top: -80px;\r\n`;\r\n\r\nconst BigOverview = styled.p`\r\n    padding: 20px;\r\n    position: relative;\r\n    top: -80px;\r\n    color: ${(props) => props.theme.white.lighter};\r\n`;\r\n\r\nconst rowVariants = {\r\n    hidden: {\r\n        x: window.outerWidth + 5,\r\n    },\r\n    visible: {\r\n        x: 0,\r\n    },\r\n    exit: {\r\n        x: -window.outerWidth - 5,\r\n    },\r\n};\r\n\r\nconst boxVariants = {\r\n    normal: {\r\n        scale: 1,\r\n    },\r\n    hover: {\r\n        scale: 1.3,\r\n        y: -80,\r\n        transition: {\r\n            delay: 0.5,\r\n            duaration: 0.1,\r\n            type: \"tween\",\r\n        },\r\n    },\r\n};\r\n\r\nconst infoVariants = {\r\n    hover: {\r\n        opacity: 1,\r\n        transition: {\r\n            delay: 0.5,\r\n            duaration: 0.1,\r\n            type: \"tween\",\r\n        },\r\n    },\r\n};\r\n\r\nconst offset = 6;\r\n\r\nfunction Home() {\r\n    const history = useHistory();\r\n    const bigMovieMatch = useRouteMatch<{ movieId: string }>(\r\n        \"/movies/:movieId\"\r\n    );\r\n    const { scrollY } = useViewportScroll();\r\n\r\n    const { data, isLoading } = useQuery<IGetMoviesResult>(\r\n        [\"movies\", \"nowPlaying\"],\r\n        getMovies\r\n    );\r\n\r\n    const { data: latestMoviesData } = useQuery<IGetMoviesResult>(\r\n        \"latestMovies\",\r\n        getLatestMovies\r\n    );\r\n    const { data: topRatedMoviesData } = useQuery<IGetMoviesResult>(\r\n        \"topRatedMovies\",\r\n        getTopRatedMovies\r\n    );\r\n    const { data: upcomingMoviesData } = useQuery<IGetMoviesResult>(\r\n        \"upcomingMovies\",\r\n        getUpcomingMovies\r\n    );\r\n\r\n    const [index, setIndex] = useState(0);\r\n    const [leaving, setLeaving] = useState(false);\r\n\r\n    const incraseIndex = () => {\r\n        if (data) {\r\n            if (leaving) return;\r\n            toggleLeaving();\r\n            const totalMovies = data.results.length - 1;\r\n            const maxIndex = Math.floor(totalMovies / offset) - 1;\r\n            setIndex((prev) => (prev === maxIndex ? 0 : prev + 1));\r\n        }\r\n    };\r\n\r\n    const toggleLeaving = () => setLeaving((prev) => !prev);\r\n    const onBoxClicked = (movieId: number) => {\r\n        console.log(`Clicked movie ID: ${movieId}`);\r\n        history.push(`/movies/${movieId}`);\r\n    };\r\n    const onOverlayClick = () => history.push(\"/\");\r\n    const clickedMovie =\r\n        bigMovieMatch?.params.movieId &&\r\n        data?.results.find(\r\n            (movie) => movie.id === +bigMovieMatch.params.movieId\r\n        );\r\n\r\n    return (\r\n        <Wrapper>\r\n            {isLoading ? (\r\n                <Loader>Loading...</Loader>\r\n            ) : (\r\n                <>\r\n                    {/* <Subtitle>Now Playing Movies</Subtitle> */}\r\n                    <Banner\r\n                        onClick={incraseIndex}\r\n                        bgPhoto={makeImagePath(\r\n                            data?.results[0].backdrop_path || \"\"\r\n                        )}\r\n                    >\r\n                        <Title>{data?.results[0].title}</Title>\r\n                        <Overview>{data?.results[0].overview}</Overview>\r\n                    </Banner>\r\n\r\n                    <Subtitle>Latest Movies</Subtitle>\r\n                    <Row\r\n                        variants={rowVariants}\r\n                        initial=\"hidden\"\r\n                        animate=\"visible\"\r\n                        exit=\"exit\"\r\n                        transition={{ type: \"tween\", duration: 1 }}\r\n                    >\r\n                        {latestMoviesData?.results?.map((movie: IMovie) => (\r\n                            <Box\r\n                                key={movie.id}\r\n                                whileHover=\"hover\"\r\n                                initial=\"normal\"\r\n                                variants={boxVariants}\r\n                                onClick={() => onBoxClicked(movie.id)}\r\n                                transition={{ type: \"tween\" }}\r\n                                bgPhoto={makeImagePath(movie.poster_path)}\r\n                            >\r\n                                <Info variants={infoVariants}>\r\n                                    <h4>{movie.title}</h4>\r\n                                </Info>\r\n                            </Box>\r\n                        ))}\r\n                    </Row>\r\n\r\n                    <Subtitle>Top Rated Movies</Subtitle>\r\n                    <Row\r\n                        variants={rowVariants}\r\n                        initial=\"hidden\"\r\n                        animate=\"visible\"\r\n                        exit=\"exit\"\r\n                        transition={{ type: \"tween\", duration: 1 }}\r\n                    >\r\n                        {topRatedMoviesData?.results?.map((movie: IMovie) => (\r\n                            <Box\r\n                                key={movie.id}\r\n                                whileHover=\"hover\"\r\n                                initial=\"normal\"\r\n                                variants={boxVariants}\r\n                                onClick={() => onBoxClicked(movie.id)}\r\n                                transition={{ type: \"tween\" }}\r\n                                bgPhoto={makeImagePath(movie.poster_path)}\r\n                            >\r\n                                <Info variants={infoVariants}>\r\n                                    <h4>{movie.title}</h4>\r\n                                </Info>\r\n                            </Box>\r\n                        ))}\r\n                    </Row>\r\n\r\n                    <Subtitle>Upcoming Movies</Subtitle>\r\n                    <Row\r\n                        variants={rowVariants}\r\n                        initial=\"hidden\"\r\n                        animate=\"visible\"\r\n                        exit=\"exit\"\r\n                        transition={{ type: \"tween\", duration: 1 }}\r\n                    >\r\n                        {upcomingMoviesData?.results?.map((movie: IMovie) => (\r\n                            <Box\r\n                                key={movie.id}\r\n                                whileHover=\"hover\"\r\n                                initial=\"normal\"\r\n                                variants={boxVariants}\r\n                                onClick={() => onBoxClicked(movie.id)}\r\n                                transition={{ type: \"tween\" }}\r\n                                bgPhoto={makeImagePath(movie.poster_path)}\r\n                            >\r\n                                <Info variants={infoVariants}>\r\n                                    <h4>{movie.title}</h4>\r\n                                </Info>\r\n                            </Box>\r\n                        ))}\r\n                    </Row>\r\n\r\n                    {/* 큰 영화 상세 화면 */}\r\n                    <AnimatePresence>\r\n                        {clickedMovie ? (\r\n                            <>\r\n                                <Overlay\r\n                                    onClick={onOverlayClick}\r\n                                    exit={{ opacity: 0 }}\r\n                                    animate={{ opacity: 1 }}\r\n                                    initial={{ opacity: 0 }}\r\n                                />\r\n                                <BigMovie\r\n                                    style={{\r\n                                        top: scrollY.get() + 100,\r\n                                    }}\r\n                                    layoutId={clickedMovie.id + \"\"}\r\n                                >\r\n                                    <BigCover\r\n                                        style={{\r\n                                            backgroundImage: `url(${makeImagePath(\r\n                                                clickedMovie.backdrop_path,\r\n                                                \"w500\"\r\n                                            )})`,\r\n                                        }}\r\n                                    />\r\n                                    <BigTitle>{clickedMovie.title}</BigTitle>\r\n                                    <BigOverview>\r\n                                        {clickedMovie.overview}\r\n                                    </BigOverview>\r\n                                </BigMovie>\r\n                            </>\r\n                        ) : null}\r\n                    </AnimatePresence>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","// Search.tsx\r\n\r\nimport { useLocation } from \"react-router\";\r\nimport { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { getMoviesByKeyword, getTvByKeyword } from \"../api\";\r\n\r\ninterface Movie {\r\n    id: number;\r\n    title: string;\r\n    poster_path: string;\r\n}\r\n\r\ninterface TVShow {\r\n    id: number;\r\n    name: string;\r\n    poster_path: string;\r\n}\r\n\r\nconst SearchResult = styled.h2`\r\n    font-size: 30px;\r\n    font-weight: 600;\r\n    margin-top: 100px;\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nconst Subtitle = styled.h3`\r\n    font-size: 26px;\r\n    font-weight: 600;\r\n    color: white;\r\n    margin-top: 30px;\r\n    margin-bottom: 10px;\r\n    text-transform: uppercase;\r\n    letter-spacing: 2px;\r\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);\r\n`;\r\n\r\nconst Slider = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 10px;\r\n    flex-wrap: wrap;\r\n    padding-bottom: 10px;\r\n`;\r\n\r\nconst SliderItem = styled.div`\r\n    min-width: 200px;\r\n    background-color: black;\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    text-align: center;\r\n`;\r\n\r\nfunction Search() {\r\n    const location = useLocation();\r\n    const keyword = new URLSearchParams(location.search).get(\"keyword\");\r\n\r\n    const [movies, setMovies] = useState<Movie[]>([]);\r\n    const [tvShows, setTvShows] = useState<TVShow[]>([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        if (keyword) {\r\n            setLoading(true);\r\n\r\n            Promise.all([getMoviesByKeyword(keyword), getTvByKeyword(keyword)])\r\n                .then(([moviesData, tvShowsData]) => {\r\n                    setMovies(moviesData.results);\r\n                    setTvShows(tvShowsData.results);\r\n                    setLoading(false);\r\n                })\r\n                .catch((err) => {\r\n                    setError(\"데이터를 불러오는 데 실패했습니다.\");\r\n                    setLoading(false);\r\n                });\r\n        }\r\n    }, [keyword]);\r\n\r\n    if (loading) return <div>Loading...</div>;\r\n    if (error) return <div>{error}</div>;\r\n\r\n    return (\r\n        <div>\r\n            <SearchResult>\"{keyword}\" 검색 결과</SearchResult>\r\n            <div>\r\n                <Subtitle>Movies</Subtitle>\r\n                <Slider>\r\n                    {movies.map((movie) => (\r\n                        <SliderItem key={movie.id}>\r\n                            <img\r\n                                src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\r\n                                alt={movie.title}\r\n                                width={200}\r\n                            />\r\n                            <p>{movie.title}</p>\r\n                        </SliderItem>\r\n                    ))}\r\n                </Slider>\r\n            </div>\r\n            <div>\r\n                <Subtitle>TV Shows</Subtitle>\r\n                <Slider>\r\n                    {tvShows.map((show) => (\r\n                        <SliderItem key={show.id}>\r\n                            <img\r\n                                src={`https://image.tmdb.org/t/p/w500${show.poster_path}`}\r\n                                alt={show.name}\r\n                                width={200}\r\n                            />\r\n                            <p>{show.name}</p>\r\n                        </SliderItem>\r\n                    ))}\r\n                </Slider>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport {\r\n    getLatestShows,\r\n    getAiringTodayShows,\r\n    getPopularShows,\r\n    getTopRatedShows,\r\n} from \"../api\";\r\n\r\nconst Subtitle = styled.h3`\r\n    font-size: 26px;\r\n    font-weight: 600;\r\n    color: white;\r\n    margin-top: 50px;\r\n    margin-bottom: 10px;\r\n    text-transform: uppercase;\r\n    letter-spacing: 2px;\r\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);\r\n`;\r\n\r\nfunction Tv() {\r\n    const [latestShows, setLatestShows] = useState<any[]>([]);\r\n    const [airingToday, setAiringToday] = useState<any[]>([]);\r\n    const [popularShows, setPopularShows] = useState<any[]>([]);\r\n    const [topRatedShows, setTopRatedShows] = useState<any[]>([]);\r\n    const [selectedShow, setSelectedShow] = useState<any | null>(null);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const latest = await getLatestShows();\r\n                const airingTodayData = await getAiringTodayShows();\r\n                const popular = await getPopularShows();\r\n                const topRated = await getTopRatedShows();\r\n\r\n                setLatestShows(latest.results || []);\r\n                setAiringToday(airingTodayData.results || []);\r\n                setPopularShows(popular.results || []);\r\n                setTopRatedShows(topRated.results || []);\r\n            } catch (error) {\r\n                console.error(\"Error fetching data:\", error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const renderSlider = (shows: any[], title: string) => (\r\n        <div style={{ marginBottom: \"20px\" }}>\r\n            <Subtitle>{title}</Subtitle>\r\n            <div style={{ display: \"flex\", flexWrap: \"wrap\", gap: \"10px\" }}>\r\n                {shows.map((show) => (\r\n                    <div\r\n                        key={show.id}\r\n                        style={{\r\n                            minWidth: \"150px\",\r\n                            backgroundColor: \"black\",\r\n                        }}\r\n                    >\r\n                        <div\r\n                            onClick={() => {\r\n                                setSelectedShow(show);\r\n                                history.push(`/tv/${show.id}`); // useHistory 사용\r\n                            }}\r\n                        >\r\n                            <img\r\n                                src={`https://image.tmdb.org/t/p/w200${show.poster_path}`}\r\n                                alt={show.name}\r\n                                style={{\r\n                                    width: \"100%\",\r\n                                }}\r\n                            />\r\n                            <h3>{show.name}</h3>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const closeModal = () => {\r\n        setSelectedShow(null);\r\n        history.push(\"/tv\");\r\n    };\r\n\r\n    return (\r\n        <div style={{ backgroundColor: \"black\", padding: \"20px\" }}>\r\n            {renderSlider(latestShows, \"Latest Shows\")}\r\n            {renderSlider(airingToday, \"Airing Today\")}\r\n            {renderSlider(popularShows, \"Popular Shows\")}\r\n            {renderSlider(topRatedShows, \"Top Rated Shows\")}\r\n\r\n            {selectedShow && (\r\n                <div\r\n                    style={{\r\n                        position: \"fixed\",\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: \"100vw\",\r\n                        height: \"100vh\",\r\n                        backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                        zIndex: 1000,\r\n                    }}\r\n                    onClick={closeModal}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            backgroundColor: \"white\",\r\n                            padding: \"20px\",\r\n                            borderRadius: \"8px\",\r\n                            width: \"80%\",\r\n                            maxWidth: \"600px\",\r\n                            cursor: \"auto\",\r\n                        }}\r\n                        onClick={(e) => e.stopPropagation()}\r\n                    >\r\n                        <h2>{selectedShow.name}</h2>\r\n                        <img\r\n                            src={`https://image.tmdb.org/t/p/w500${selectedShow.poster_path}`}\r\n                            alt={selectedShow.name}\r\n                            style={{\r\n                                width: \"100%\",\r\n                                borderRadius: \"8px\",\r\n                                marginBottom: \"10px\",\r\n                            }}\r\n                        />\r\n                        <p>{selectedShow.overview}</p>\r\n                        <button\r\n                            onClick={closeModal}\r\n                            style={{\r\n                                backgroundColor: \"#ff5e57\",\r\n                                color: \"white\",\r\n                                padding: \"10px 20px\",\r\n                                borderRadius: \"5px\",\r\n                                border: \"none\",\r\n                                cursor: \"pointer\",\r\n                                marginTop: \"10px\",\r\n                            }}\r\n                        >\r\n                            Close\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tv;\r\n","// App.tsx\r\n\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Header from \"./Components/Header\";\r\nimport Home from \"./Routes/Home\";\r\nimport Search from \"./Routes/Search\";\r\nimport Tv from \"./Routes/Tv\";\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <Header />\r\n            <Switch>\r\n                <Route path=\"/tv\">\r\n                    <Tv />\r\n                </Route>\r\n                <Route path=\"/search\">\r\n                    <Search />\r\n                </Route>\r\n                <Route path={[\"/\", \"/movies/:movieId\"]}>\r\n                    <Home />\r\n                </Route>\r\n                <Route path=\"/tv/:tvId\">\r\n                    <Tv />\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// index.tsx\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport App from \"./App\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport { theme } from \"./theme\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  font-weight: 300;\r\n  font-family: 'Source Sans Pro', sans-serif;\r\n  color:${(props) => props.theme.white.darker};\r\n  line-height: 1.2;\r\n  background-color: black;\r\n}\r\na {\r\n  text-decoration:none;\r\n  color:inherit;\r\n}\r\n`;\r\n\r\nconst client = new QueryClient();\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <RecoilRoot>\r\n            <QueryClientProvider client={client}>\r\n                <ThemeProvider theme={theme}>\r\n                    <GlobalStyle />\r\n                    <App />\r\n                </ThemeProvider>\r\n            </QueryClientProvider>\r\n        </RecoilRoot>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const theme: DefaultTheme = {\r\n  red: \"#E51013\",\r\n  black: {\r\n    veryDark: \"#141414\",\r\n    darker: \"#181818\",\r\n    lighter: \"#2F2F2F\",\r\n  },\r\n  white: {\r\n    lighter: \"#fff\",\r\n    darker: \"#e5e5e5\",\r\n  },\r\n};\r\n"],"sourceRoot":""}